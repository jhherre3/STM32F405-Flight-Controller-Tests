import board
import busio
import time
import math
import displayio
from adafruit_displayio_ssd1306 import SSD1306
from adafruit_display_text import label
from adafruit_lis3mdl import LIS3MDL
import terminalio

# Release any previously configured displays
displayio.release_displays()

# Initialize I2C
i2c = busio.I2C(board.SCL, board.SDA)

# Set up the OLED display (rotated 180 degrees)
WIDTH = 128
HEIGHT = 64  # Adjust for 128x64 OLED
display_bus = displayio.I2CDisplay(i2c, device_address=0x3C)
oled = SSD1306(display_bus, width=WIDTH, height=HEIGHT, rotation=180)

# Create a display group
group = displayio.Group()

# Add a title label
title_label = label.Label(
    terminalio.FONT, text="Compass", color=0xFFFFFF, x=5, y=5
)
group.append(title_label)

# Add labels for X, Y magnetic field data
x_label = label.Label(terminalio.FONT, text="X: --", color=0xFFFFFF, x=5, y=17)
group.append(x_label)

y_label = label.Label(terminalio.FONT, text="Y: --", color=0xFFFFFF, x=5, y=27)
group.append(y_label)

# Add a label for the direction (N, NE, etc.)
direction_label = label.Label(terminalio.FONT, text="Dir: --", color=0xFFFFFF, x=5, y=37)
group.append(direction_label)

# Add a label for the heading (in degrees)
heading_label = label.Label(terminalio.FONT, text="Heading: --°", color=0xFFFFFF, x=5, y=47)
group.append(heading_label)

# Set the display's root group to show the content
oled.root_group = group

# Initialize LIS3MDL sensor
try:
    mag_sensor = LIS3MDL(i2c)
    print("LIS3MDL Magnetometer Initialized.")
except Exception as e:
    print(f"Failed to initialize LIS3MDL: {e}")
    while True:
        pass  # Halt if LIS3MDL fails

# Calibration offsets from your calibration process
OFFSET_X = 16.75
OFFSET_Y = -39.43
OFFSET_Z = -40.86

# Magnetic declination for your location (in degrees, Location)
MAGNETIC_DECLINATION = 11.0  # Declination for location find yours online

def calculate_heading(mag_x, mag_y):
    """
    Calculates the heading from magnetic field components and applies magnetic declination.
    """
    heading = math.atan2(mag_y, mag_x) * (180 / math.pi)  # Convert to degrees
    if heading < 0:
        heading += 360  # Normalize to 0-360 degrees

    # Add magnetic declination to get true heading
    heading = (heading + MAGNETIC_DECLINATION) % 360
    return heading

def heading_to_cardinal(heading):
    """
    Converts the heading to the nearest cardinal direction (N, NE, E, SE, S, SW, W, NW).
    """
    directions = ["N", "NE", "E", "SE", "S", "SW", "W", "NW"]
    index = round(heading / 45) % 8  # Divide into 8 segments
    return directions[index]

# Main loop
while True:
    try:
        # Read magnetic field data
        raw_x, raw_y, raw_z = mag_sensor.magnetic

        # Apply calibration offsets
        calibrated_x = raw_x - OFFSET_X
        calibrated_y = raw_y - OFFSET_Y
        calibrated_z = raw_z - OFFSET_Z

        # Calculate true heading
        heading = calculate_heading(calibrated_x, calibrated_y)

        # Determine cardinal direction
        cardinal_direction = heading_to_cardinal(heading)

        # Update the OLED display
        x_label.text = f"X: {calibrated_x:.2f}"
        y_label.text = f"Y: {calibrated_y:.2f}"
        direction_label.text = f"Dir: {cardinal_direction}"
        heading_label.text = f"Heading: {heading:.2f}°"

        # Debug output to the console
        print(f"Magnetic Field: X={calibrated_x:.2f}, Y={calibrated_y:.2f}")
        print(f"True Heading: {heading:.2f}°")
        print(f"Direction: {cardinal_direction}")

    except Exception as e:
        print(f"Error in main loop: {e}")
        x_label.text = "X: Error"
        y_label.text = "Y: Error"
        direction_label.text = "Dir: Error"
        heading_label.text = "Heading: Error"

    time.sleep(0.5)  # Update every 0.5 seconds
